@page "/gamewindow"
@inject IJSRuntime jsRuntime

    <svg style="background-color:black; width:@($"{gameManager.WindowWidth}px"); height:@($"{gameManager.WindowHeight}px");" id="@gameWindowId.ToString()">
        @foreach (var gameModel in gameManager.GameModels)
        { 
            <GameComponent Model="gameModel"></GameComponent>
        }

    </svg>
    <div>
        <button class="btn btn-primary" @onclick="StartGame">Start Game</button>
        <button class="btn btn-primary" @onmousedown="PlayerLeft" @onmouseup="CancelPlayerLeft" @onmouseout="CancelPlayerLeft" >Left</button>
        <button class="btn btn-danger" @onclick="PlayerFire">Fire Missile</button>
        <button class="btn btn-primary" @onmousedown="PlayerRight" @onmouseup="CancelPlayerRight" @onmouseout="CancelPlayerRight">Right</button>
        <button class="btn btn-primary" @onclick="ThanosSnap">THANOS SNAP!</button>
    </div>
<GameHUD GameManager="@gameManager"></GameHUD>

@code {
    ClientSideGameManager gameManager;
    Guid gameWindowId = Guid.NewGuid();

    void PlayerLeft() => gameManager.PlayerLeft();
    void CancelPlayerLeft() => gameManager.CancelPlayerLeft();
    void PlayerRight() => gameManager.PlayerRight();
    void CancelPlayerRight() => gameManager.CancelPlayerRight();
    void PlayerFire() => gameManager.PlayerFire();
    void ThanosSnap() => gameManager.ThanosSnap();

    protected override void OnInitialized()
    {
        gameManager = new ClientSideGameManager(jsRuntime);
        JSKeyHandler.KeyDown += OnKeyDown;
        JSKeyHandler.KeyUp += OnKeyUp;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntime.InvokeVoidAsync("addResizeGameWindowEvent", gameWindowId.ToString(), DotNetObjectReference.Create<GameWindow>(this));        
    }

    async void StartGame()
    {
        await gameManager.StartNewGame();
        gameManager.AfterGameUpdated = () => { StateHasChanged(); };
    }

    public void OnKeyDown(object sender, ConsoleKey key)
    {
        switch (key)
        {
            case ConsoleKey.LeftArrow:
                PlayerLeft();
                break;
            case ConsoleKey.RightArrow:
                PlayerRight();
                break;
            case ConsoleKey.Spacebar:
                PlayerFire();
                break;
            case ConsoleKey.S:
                ThanosSnap();
                break;
        }
    }

    public void OnKeyUp(object sender, ConsoleKey key)
    {
        switch (key)
        {
            case ConsoleKey.LeftArrow:
                CancelPlayerLeft();
                break;
            case ConsoleKey.RightArrow:
                CancelPlayerRight();
                break;
        }
    }

    [JSInvokable]
    public void OnGameWindowResize(int newHeight, int newWidth)
    {
        Console.WriteLine($"New Height:{newHeight} New Width{newWidth}");
    }
}
